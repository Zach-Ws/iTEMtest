// Using old gradle version for minecraft 1.8
//file:noinspection GrDeprecatedAPIUsage
//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.minecraftforge.net/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        // Skytils dependency to build with essential (for GUI)
        classpath 'com.github.hard2make1name:ForgeGradle:e682169'
        // ShadowJar (include dependencies in the jar)
        classpath "com.github.johnrengelman:shadow:6.1.0"

        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.20"
    }
}
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url = "https://repo.sk1er.club/repository/maven-public" }
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url 'https://repo.hypixel.net/repository/Hypixel/' }
    maven { url 'https://repo.polyfrost.cc/releases' }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'java'
apply plugin: 'com.google.protobuf'
// For test coverage data
apply plugin: 'jacoco'

tasks.withType(JavaCompile) {
    // So that special characters like 5-stars are interpreted properly
    options.encoding = 'UTF-8'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

// Restriction: never make one of the subversion numbers > 255 due to how versioning works.
version = "0.1.1.5"
group= "club.thom.tem" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "iTEM"

minecraft {
    // Latest 1.8.9 forge version
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    // Add essential
    clientRunArgs += '--tweakClass cc.polyfrost.oneconfig.loader.stage0.LaunchWrapperTweaker'
    // Code to only update version in here and not in the java file
    replaceIn "src/main/java/club/thom/tem/TEM.java"
    replace "@@VERSION@@", project.version
}
dependencies {
    // Included in essentials but just in case
    //noinspection GradlePackageUpdate
    implementation "com.electronwill.night-config:toml:3.6.0"
    //noinspection GradlePackageUpdate
    implementation "com.electronwill.night-config:core:3.6.0"
    // Tests for MCForge
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.awaitility:awaitility-groovy:4.1.1'
    testImplementation 'org.powermock:powermock-core:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    implementation('org.reflections:reflections:0.10.2')

    implementation 'com.google.code.gson:gson:2.2.4'
    // Log4J (already packaged with forge)
    //noinspection GradlePackageUpdate
    implementation 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    implementation 'org.apache.logging.log4j:log4j-core:2.0-beta9'

    // For talking to the backend
    implementation 'com.google.protobuf:protobuf-java:3.19.3'
    implementation 'com.neovisionaries:nv-websocket-client:2.14'

    implementation 'net.hypixel:mod-api-forge-tweaker:1.0.1.1'

    compileOnly ('net.hypixel:mod-api-forge:1.0.1.1') {
        exclude group: 'me.djtheredstoner', module: 'DevAuth-forge-legacy'
    }
    // For local data storage
    implementation 'com.h2database:h2:2.2.224'

    implementation 'org.dizitart:nitrite:3.4.4'
    compileOnly 'cc.polyfrost:oneconfig-1.8.9-forge:0.2.2-alpha'
    testImplementation 'cc.polyfrost:oneconfig-1.8.9-forge:0.2.2-alpha'
    implementation 'cc.polyfrost:oneconfig-wrapper-launchwrapper:1.0.0-beta'
//    implementation 'org.dizitart:nitrite-mvstore-adapter'
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            filesMatching('mcmod.info') {
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, that's not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }
jar {
    manifest {
        attributes(
                "TweakClass": "club.thom.tem.tweaker.HypixelAndOneConfigTweaker",
                "ModSide": "CLIENT",
                "TweakOrder": "0",
                "ForceLoadAsMod": true
        )
    }
}
sourceJar {
    enabled = false
}
shadowJar {
    exclude(
        "META-INF/versions/**"
    )


    dependencies {
        include(dependency {
            it.moduleGroup == 'cc.polyfrost'
        })
        // Include modapi tweaker
        include(dependency {
            it.moduleGroup == 'net.hypixel'
        })
        include(dependency {
            it.moduleGroup == 'com.electronwill.night-config'
        })

        include(dependency {
            it.moduleGroup == 'com.google.protobuf'
        })

        include(dependency('com.google.code.gson:gson:2.2.4'))

        include(dependency {
            it.moduleGroup == 'com.neovisionaries'
        })

        include(dependency {
            it.moduleGroup == 'org.slf4j'
        })
        include(dependency {
            it.moduleGroup == 'org.javassist'
        })
        include(dependency('org.reflections:reflections:0.10.2'))

        include(dependency {
            it.moduleGroup == 'com.h2database'
        })
        include(dependency {
            it.moduleGroup == 'org.dizitart'
        })

        include(dependency {
            it.moduleGroup == 'org.objenesis'
        })

        include(dependency {
            it.moduleGroup == 'com.fasterxml.jackson.core'
        })

        include(dependency {
            it.moduleGroup == 'uk.co.jemos.podam'
        })
    }
    relocate("net.hypixel.modapi.tweaker", "club.thom.hypixel-net.modapi.tweaker")
    // TEM-0.0.0.1.jar for example
    archiveFileName = "${baseName}-${version}.${extension}"
}


reobf {
    shadowJar {} // Re-obfuscate the shadowed JAR
}

// Signs the jar with TEM's developer team's signature.
task signJar(type: SignJar) {
    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

test {
    useJUnit()
    // Runs code coverage report after testing
    finalizedBy jacocoTestReport
}

task instrument(dependsOn: [classes, project.configurations.jacocoAnt]) {

    inputs.files classes.outputs.files
    File outputDir = new File(project.buildDir, 'instrumentedClasses')
    outputs.dir outputDir
    doFirst {
        project.delete(outputDir)
        ant.taskdef(
                resource: 'org/jacoco/ant/antlib.xml',
                classpath: project.configurations.jacocoAnt.asPath,
                uri: 'jacoco'
        )
        def instrumented = false
        if (file(sourceSets.main.java.outputDir).exists()) {
            def instrumentedClassedDir = "${outputDir}/${sourceSets.main.java}"
            ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                fileset(dir: sourceSets.main.java.outputDir, includes: '**/*.class')
            }
            //Replace the classes dir in the test classpath with the instrumented one
            sourceSets.test.runtimeClasspath -= files(sourceSets.main.java.outputDir)
            sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
            instrumented = true
        }
        if (instrumented) {
            test.jvmArgs += '-noverify'
        }
    }
}

test.dependsOn instrument

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            // These are generated methods.
            fileTree(dir: it, exclude: 'club/thom/tem/models/messages/**')
        }))
    }
    dependsOn test
}

// Sign the jar after building
tasks.signJar.mustRunAfter reobfShadowJar
tasks.signJar.mustRunAfter shadowJar
tasks.signJar.mustRunAfter jar

reobfShadowJar.finalizedBy signJar
shadowJar.finalizedBy signJar
jar.finalizedBy signJar

